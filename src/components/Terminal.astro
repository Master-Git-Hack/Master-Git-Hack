---
import Icon from './Icon.astro';
const { intro } = Astro.props; // Recibe el array de textos dinámicos
const texts = intro.split('|'); // Convierte el string en un array de textos
import { TypeAnimation } from 'react-type-animation';
console.log(texts)
// function([string1, string2],target id,[color1,color2])    

---

<div class="h-screen flex items-center justify-center text-2xl text-center text-black dark:text-white">
    <Icon icon='Bash' className="w-20"/>
    <TypeAnimation
    client:load 
      sequence={[
        "Bienvenido",2000,
        "Me presento, soy:",2000,
        "Einar Jhordany Serna Valdivia",2000,
        "Full Stack Developer",2000,
        "Mi Stack de tecnologías favoritas son:",2000,
        "Frontend:",2000,
        "React Typescript",2000,
        "Backend:",2000,
        "Python FastAPI/Flask",2000,
        "Bases de Datos:",2000,
        "PostgreSQL/MongoDB",2000
      ]}
      wrapper="span"
      cursor={true}
      repeat={Infinity}
      style={{ fontSize: '2em', display: 'inline-block' }}
    />

  <!-- <span class="console-text ">{texts}</span>
  <span class="console-underscore">_</span> -->
</div>


<!-- <script>
  const texts = {{JSON.stringify(texts)}}; // Convertir los textos en un array JS
  let index = 0;
  let charIndex = 0;
  let isDeleting = false;
  let currentText = '';
  const typingSpeed = 150;
  const deletingSpeed = 100;
  const delayBetweenTexts = 2000;

  const consoleText = document.querySelector('.console-text');
  const consoleUnderscore = document.querySelector('.console-underscore');

  function type() {
    const fullText = texts[index];
    if (isDeleting) {
      currentText = fullText.substring(0, charIndex--);
    } else {
      currentText = fullText.substring(0, charIndex++);
    }

    consoleText.textContent = currentText;

    if (!isDeleting && charIndex === fullText.length) {
      isDeleting = true;
      setTimeout(type, delayBetweenTexts);
    } else if (isDeleting && charIndex === 0) {
      isDeleting = false;
      index = (index + 1) % texts.length;
      setTimeout(type, typingSpeed);
    } else {
      setTimeout(type, isDeleting ? deletingSpeed : typingSpeed);
    }
  }

  setInterval(() => {
    consoleUnderscore.style.visibility = consoleUnderscore.style.visibility === 'visible' ? 'hidden' : 'visible';
  }, 500);

  type();
</script> -->